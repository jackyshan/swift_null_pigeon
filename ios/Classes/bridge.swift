// Autogenerated from Pigeon (v9.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

enum ResponseCode: Int {
  case success = 0
  case fail = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct RequestParam {
  var key: String
  var data: [String?: Any?]? = nil

  static func fromList(_ list: [Any]) -> RequestParam? {
    let key = list[0] as! String
    let data = list[1] as! [String?: Any?]? 

    return RequestParam(
      key: key,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ResponseParam {
  var code: ResponseCode
  var message: String? = nil
  var data: [String?: Any?]? = nil

  static func fromList(_ list: [Any]) -> ResponseParam? {
    let code = ResponseCode(rawValue: list[0] as! Int)!
    let message = list[1] as! String? 
    let data = list[2] as! [String?: Any?]? 

    return ResponseParam(
      code: code,
      message: message,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      code.rawValue,
      message,
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct InitRequestParam {
  var key: String
  var data: PushConfig

  static func fromList(_ list: [Any]) -> InitRequestParam? {
    let key = list[0] as! String
    let data = PushConfig.fromList(list[1] as! [Any])!

    return InitRequestParam(
      key: key,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      data.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ObserverData {
  var callbackKey: String

  static func fromList(_ list: [Any]) -> ObserverData? {
    let callbackKey = list[0] as! String

    return ObserverData(
      callbackKey: callbackKey
    )
  }
  func toList() -> [Any?] {
    return [
      callbackKey,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ObserverRequestParam {
  var key: String
  var data: ObserverData

  static func fromList(_ list: [Any]) -> ObserverRequestParam? {
    let key = list[0] as! String
    let data = ObserverData.fromList(list[1] as! [Any])!

    return ObserverRequestParam(
      key: key,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      data.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SetAliasRequestParam {
  var key: String
  var alias: [String?]

  static func fromList(_ list: [Any]) -> SetAliasRequestParam? {
    let key = list[0] as! String
    let alias = list[1] as! [String?]

    return SetAliasRequestParam(
      key: key,
      alias: alias
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      alias,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PushConfig {
  var hostApp: String
  var appId: String
  var deviceId: String
  var defaultHosts: [String?]? = nil

  static func fromList(_ list: [Any]) -> PushConfig? {
    let hostApp = list[0] as! String
    let appId = list[1] as! String
    let deviceId = list[2] as! String
    let defaultHosts = list[3] as! [String?]? 

    return PushConfig(
      hostApp: hostApp,
      appId: appId,
      deviceId: deviceId,
      defaultHosts: defaultHosts
    )
  }
  func toList() -> [Any?] {
    return [
      hostApp,
      appId,
      deviceId,
      defaultHosts,
    ]
  }
}

///
/// 连接信息
/// */
///
/// Generated class from Pigeon that represents data sent in messages.
struct ConnInfo {

  static func fromList(_ list: [Any]) -> ConnInfo? {

    return ConnInfo(
    )
  }
  func toList() -> [Any?] {
    return [
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ConnStatusObserverCallParam {
  var key: String
  var data: ConnInfo

  static func fromList(_ list: [Any]) -> ConnStatusObserverCallParam? {
    let key = list[0] as! String
    let data = ConnInfo.fromList(list[1] as! [Any])!

    return ConnStatusObserverCallParam(
      key: key,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      data.toList(),
    ]
  }
}

///
/// 推送消息
/// */
///
/// Generated class from Pigeon that represents data sent in messages.
struct PushData {

  static func fromList(_ list: [Any]) -> PushData? {

    return PushData(
    )
  }
  func toList() -> [Any?] {
    return [
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PushObserverCallParam {
  var key: String
  var data: PushData

  static func fromList(_ list: [Any]) -> PushObserverCallParam? {
    let key = list[0] as! String
    let data = PushData.fromList(list[1] as! [Any])!

    return PushObserverCallParam(
      key: key,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      data.toList(),
    ]
  }
}

///
/// 订阅结果
/// */
///
/// Generated class from Pigeon that represents data sent in messages.
struct SubscribeResult {

  static func fromList(_ list: [Any]) -> SubscribeResult? {

    return SubscribeResult(
    )
  }
  func toList() -> [Any?] {
    return [
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TopicData {
  var topic: String
  var result: SubscribeResult

  static func fromList(_ list: [Any]) -> TopicData? {
    let topic = list[0] as! String
    let result = SubscribeResult.fromList(list[1] as! [Any])!

    return TopicData(
      topic: topic,
      result: result
    )
  }
  func toList() -> [Any?] {
    return [
      topic,
      result.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct TopicObserverCallParam {
  var key: String
  var data: TopicData

  static func fromList(_ list: [Any]) -> TopicObserverCallParam? {
    let key = list[0] as! String
    let data = TopicData.fromList(list[1] as! [Any])!

    return TopicObserverCallParam(
      key: key,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      data.toList(),
    ]
  }
}

private class NativePushBridgeCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return InitRequestParam.fromList(self.readValue() as! [Any])
      case 129:
        return ObserverData.fromList(self.readValue() as! [Any])
      case 130:
        return ObserverRequestParam.fromList(self.readValue() as! [Any])
      case 131:
        return PushConfig.fromList(self.readValue() as! [Any])
      case 132:
        return RequestParam.fromList(self.readValue() as! [Any])
      case 133:
        return ResponseParam.fromList(self.readValue() as! [Any])
      case 134:
        return SetAliasRequestParam.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class NativePushBridgeCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? InitRequestParam {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ObserverData {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ObserverRequestParam {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PushConfig {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? RequestParam {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ResponseParam {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? SetAliasRequestParam {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativePushBridgeCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativePushBridgeCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativePushBridgeCodecWriter(data: data)
  }
}

class NativePushBridgeCodec: FlutterStandardMessageCodec {
  static let shared = NativePushBridgeCodec(readerWriter: NativePushBridgeCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativePushBridge {
  ///
  /// 连接
  /// */
  func connect(param: InitRequestParam, completion: @escaping (Result<ResponseParam, Error>) -> Void)
  ///
  /// 断开连接
  /// */
  func disconnect() throws -> ResponseParam
  ///
  /// 添加连接状态监听
  /// */
  func addConnStatusObserver(param: ObserverRequestParam) throws -> ResponseParam
  ///
  /// 移除连接状态监听
  /// */
  func removeConnStatusObserver(param: ObserverRequestParam) throws -> ResponseParam
  ///
  /// 添加推送消息监听
  /// */
  func addPushObserver(param: ObserverRequestParam) throws -> ResponseParam
  ///
  /// 移除连接状态监听
  /// */
  func removePushObserver(param: ObserverRequestParam) throws -> ResponseParam
  ///
  /// 设置别名
  /// */
  func setAlias(param: SetAliasRequestParam, completion: @escaping (Result<ResponseParam, Error>) -> Void)
  ///
  /// 清除别名
  /// */
  func clearAlias(completion: @escaping (Result<ResponseParam, Error>) -> Void)
  ///
  /// 订阅主题
  /// */
  func subscribeTopic(param: RequestParam) throws -> ResponseParam
  ///
  /// 取消订阅主题
  /// */
  func unsubscribeTopic(param: RequestParam) throws -> ResponseParam
  ///
  /// 添加主题订阅监听
  /// */
  func addTopicsObserver(param: ObserverRequestParam) throws -> ResponseParam
  ///
  /// 移除主题订阅监听
  /// */
  func removeTopicsObserver(param: ObserverRequestParam) throws -> ResponseParam
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativePushBridgeSetup {
  /// The codec used by NativePushBridge.
  static var codec: FlutterStandardMessageCodec { NativePushBridgeCodec.shared }
  /// Sets up an instance of `NativePushBridge` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativePushBridge?) {
    ///
    /// 连接
    /// */
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.connect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! InitRequestParam
        api.connect(param: paramArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    ///
    /// 断开连接
    /// */
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.disconnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { _, reply in
        do {
          let result = try api.disconnect()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    ///
    /// 添加连接状态监听
    /// */
    let addConnStatusObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.addConnStatusObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addConnStatusObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! ObserverRequestParam
        do {
          let result = try api.addConnStatusObserver(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addConnStatusObserverChannel.setMessageHandler(nil)
    }
    ///
    /// 移除连接状态监听
    /// */
    let removeConnStatusObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.removeConnStatusObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeConnStatusObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! ObserverRequestParam
        do {
          let result = try api.removeConnStatusObserver(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeConnStatusObserverChannel.setMessageHandler(nil)
    }
    ///
    /// 添加推送消息监听
    /// */
    let addPushObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.addPushObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addPushObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! ObserverRequestParam
        do {
          let result = try api.addPushObserver(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addPushObserverChannel.setMessageHandler(nil)
    }
    ///
    /// 移除连接状态监听
    /// */
    let removePushObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.removePushObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removePushObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! ObserverRequestParam
        do {
          let result = try api.removePushObserver(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removePushObserverChannel.setMessageHandler(nil)
    }
    ///
    /// 设置别名
    /// */
    let setAliasChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.setAlias", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAliasChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! SetAliasRequestParam
        api.setAlias(param: paramArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setAliasChannel.setMessageHandler(nil)
    }
    ///
    /// 清除别名
    /// */
    let clearAliasChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.clearAlias", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearAliasChannel.setMessageHandler { _, reply in
        api.clearAlias() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      clearAliasChannel.setMessageHandler(nil)
    }
    ///
    /// 订阅主题
    /// */
    let subscribeTopicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.subscribeTopic", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subscribeTopicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! RequestParam
        do {
          let result = try api.subscribeTopic(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      subscribeTopicChannel.setMessageHandler(nil)
    }
    ///
    /// 取消订阅主题
    /// */
    let unsubscribeTopicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.unsubscribeTopic", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unsubscribeTopicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! RequestParam
        do {
          let result = try api.unsubscribeTopic(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unsubscribeTopicChannel.setMessageHandler(nil)
    }
    ///
    /// 添加主题订阅监听
    /// */
    let addTopicsObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.addTopicsObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addTopicsObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! ObserverRequestParam
        do {
          let result = try api.addTopicsObserver(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addTopicsObserverChannel.setMessageHandler(nil)
    }
    ///
    /// 移除主题订阅监听
    /// */
    let removeTopicsObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativePushBridge.removeTopicsObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeTopicsObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramArg = args[0] as! ObserverRequestParam
        do {
          let result = try api.removeTopicsObserver(param: paramArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeTopicsObserverChannel.setMessageHandler(nil)
    }
  }
}
private class FlutterPushBridgeCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ConnInfo.fromList(self.readValue() as! [Any])
      case 129:
        return ConnStatusObserverCallParam.fromList(self.readValue() as! [Any])
      case 130:
        return PushData.fromList(self.readValue() as! [Any])
      case 131:
        return PushObserverCallParam.fromList(self.readValue() as! [Any])
      case 132:
        return ResponseParam.fromList(self.readValue() as! [Any])
      case 133:
        return SubscribeResult.fromList(self.readValue() as! [Any])
      case 134:
        return TopicData.fromList(self.readValue() as! [Any])
      case 135:
        return TopicObserverCallParam.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class FlutterPushBridgeCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ConnInfo {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ConnStatusObserverCallParam {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PushData {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PushObserverCallParam {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ResponseParam {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? SubscribeResult {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? TopicData {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? TopicObserverCallParam {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterPushBridgeCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterPushBridgeCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterPushBridgeCodecWriter(data: data)
  }
}

class FlutterPushBridgeCodec: FlutterStandardMessageCodec {
  static let shared = FlutterPushBridgeCodec(readerWriter: FlutterPushBridgeCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterPushBridge {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterPushBridgeCodec.shared
  }
  func onConnStatusObserverCall(param paramArg: ConnStatusObserverCallParam, completion: @escaping (ResponseParam) -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterPushBridge.onConnStatusObserverCall", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paramArg] as [Any?]) { response in
      let result = response as! ResponseParam
      completion(result)
    }
  }
  func onPushObserverCall(param paramArg: PushObserverCallParam, completion: @escaping (ResponseParam) -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterPushBridge.onPushObserverCall", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paramArg] as [Any?]) { response in
      let result = response as! ResponseParam
      completion(result)
    }
  }
  func onTopicObserverCall(param paramArg: TopicObserverCallParam, completion: @escaping (ResponseParam) -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FlutterPushBridge.onTopicObserverCall", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([paramArg] as [Any?]) { response in
      let result = response as! ResponseParam
      completion(result)
    }
  }
}
