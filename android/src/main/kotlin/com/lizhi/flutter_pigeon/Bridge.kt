// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.lizhi.flutter_pigeon

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ResponseCode(val raw: Int) {
  SUCCESS(0),
  FAIL(1);

  companion object {
    fun ofRaw(raw: Int): ResponseCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ConnectStatus(val raw: Int) {
  CONNECTING(0),
  CONNECTED(1),
  DISCONNECT(2);

  companion object {
    fun ofRaw(raw: Int): ConnectStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TopicResultStatus(val raw: Int) {
  INVALID(0),
  PROCESSING(1),
  AVAILABLE(2);

  companion object {
    fun ofRaw(raw: Int): TopicResultStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RequestParam (
  val key: String,
  val data: Map<String?, Any?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RequestParam {
      val key = list[0] as String
      val data = list[1] as Map<String?, Any?>?
      return RequestParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ResponseParam (
  val code: ResponseCode,
  val message: String? = null,
  val data: Map<String?, Any?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ResponseParam {
      val code = ResponseCode.ofRaw(list[0] as Int)!!
      val message = list[1] as String?
      val data = list[2] as Map<String?, Any?>?
      return ResponseParam(code, message, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code.raw,
      message,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InitRequestParam (
  val key: String,
  val data: PushConfig

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): InitRequestParam {
      val key = list[0] as String
      val data = PushConfig.fromList(list[1] as List<Any?>)
      return InitRequestParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ObserverData (
  val appId: String,
  val callbackKey: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ObserverData {
      val appId = list[0] as String
      val callbackKey = list[1] as String
      return ObserverData(appId, callbackKey)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      appId,
      callbackKey,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ObserverRequestParam (
  val key: String,
  val data: ObserverData

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ObserverRequestParam {
      val key = list[0] as String
      val data = ObserverData.fromList(list[1] as List<Any?>)
      return ObserverRequestParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SetAliasParam (
  val appId: String,
  val alias: List<String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SetAliasParam {
      val appId = list[0] as String
      val alias = list[1] as List<String?>
      return SetAliasParam(appId, alias)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      appId,
      alias,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SetAliasRequestParam (
  val key: String,
  val data: SetAliasParam

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SetAliasRequestParam {
      val key = list[0] as String
      val data = SetAliasParam.fromList(list[1] as List<Any?>)
      return SetAliasRequestParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PushConfig (
  val hostApp: String,
  val appId: String,
  val deviceId: String,
  val defaultHosts: List<String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PushConfig {
      val hostApp = list[0] as String
      val appId = list[1] as String
      val deviceId = list[2] as String
      val defaultHosts = list[3] as List<String?>?
      return PushConfig(hostApp, appId, deviceId, defaultHosts)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hostApp,
      appId,
      deviceId,
      defaultHosts,
    )
  }
}

/**
 *
 * 连接信息
 * 
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ConnectInfo (
  val errorCode: Long,
  val errorMessage: String? = null,
  val connStatus: ConnectStatus? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ConnectInfo {
      val errorCode = list[0].let { if (it is Int) it.toLong() else it as Long }
      val errorMessage = list[1] as String?
      val connStatus: ConnectStatus? = (list[2] as Int?)?.let {
        ConnectStatus.ofRaw(it)
      }
      return ConnectInfo(errorCode, errorMessage, connStatus)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      errorCode,
      errorMessage,
      connStatus?.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ConnStatusCall (
  val callbackKey: String,
  val appId: String,
  val data: ConnectInfo

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ConnStatusCall {
      val callbackKey = list[0] as String
      val appId = list[1] as String
      val data = ConnectInfo.fromList(list[2] as List<Any?>)
      return ConnStatusCall(callbackKey, appId, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      callbackKey,
      appId,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ConnStatusObserverCallParam (
  val key: String,
  val data: ConnStatusCall

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ConnStatusObserverCallParam {
      val key = list[0] as String
      val data = ConnStatusCall.fromList(list[1] as List<Any?>)
      return ConnStatusObserverCallParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TransferData (
  val seq: String? = null,
  val payloadId: String? = null,
  val payload: String? = null,
  val timestamp: Long,
  val deviceId: String? = null,
  val alias: String? = null,
  val topic: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TransferData {
      val seq = list[0] as String?
      val payloadId = list[1] as String?
      val payload = list[2] as String?
      val timestamp = list[3].let { if (it is Int) it.toLong() else it as Long }
      val deviceId = list[4] as String?
      val alias = list[5] as String?
      val topic = list[6] as String?
      return TransferData(seq, payloadId, payload, timestamp, deviceId, alias, topic)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      seq,
      payloadId,
      payload,
      timestamp,
      deviceId,
      alias,
      topic,
    )
  }
}

/**
 *
 * 推送消息
 * 
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PushMessageData (
  val type: String? = null,
  val data: TransferData? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PushMessageData {
      val type = list[0] as String?
      val data: TransferData? = (list[1] as List<Any?>?)?.let {
        TransferData.fromList(it)
      }
      return PushMessageData(type, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      data?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PushCall (
  val callbackKey: String,
  val appId: String,
  val data: PushMessageData

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PushCall {
      val callbackKey = list[0] as String
      val appId = list[1] as String
      val data = PushMessageData.fromList(list[2] as List<Any?>)
      return PushCall(callbackKey, appId, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      callbackKey,
      appId,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PushObserverCallParam (
  val key: String,
  val data: PushCall

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PushObserverCallParam {
      val key = list[0] as String
      val data = PushCall.fromList(list[1] as List<Any?>)
      return PushObserverCallParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data.toList(),
    )
  }
}

/**
 *
 * 订阅结果
 * 
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class TopicSubscribeResult (
  val status: TopicResultStatus,
  val code: Long,
  val msg: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TopicSubscribeResult {
      val status = TopicResultStatus.ofRaw(list[0] as Int)!!
      val code = list[1].let { if (it is Int) it.toLong() else it as Long }
      val msg = list[2] as String?
      return TopicSubscribeResult(status, code, msg)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status.raw,
      code,
      msg,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TopicSubscribeData (
  val topic: String,
  val result: TopicSubscribeResult

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TopicSubscribeData {
      val topic = list[0] as String
      val result = TopicSubscribeResult.fromList(list[1] as List<Any?>)
      return TopicSubscribeData(topic, result)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      topic,
      result.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TopicCall (
  val callbackKey: String,
  val appId: String,
  val data: TopicSubscribeData

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TopicCall {
      val callbackKey = list[0] as String
      val appId = list[1] as String
      val data = TopicSubscribeData.fromList(list[2] as List<Any?>)
      return TopicCall(callbackKey, appId, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      callbackKey,
      appId,
      data.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class TopicObserverCallParam (
  val key: String,
  val data: TopicCall

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): TopicObserverCallParam {
      val key = list[0] as String
      val data = TopicCall.fromList(list[1] as List<Any?>)
      return TopicObserverCallParam(key, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      key,
      data.toList(),
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object NativePushBridgeCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitRequestParam.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ObserverData.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ObserverRequestParam.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PushConfig.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RequestParam.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ResponseParam.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SetAliasParam.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SetAliasRequestParam.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is InitRequestParam -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ObserverData -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ObserverRequestParam -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PushConfig -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is RequestParam -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is ResponseParam -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is SetAliasParam -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is SetAliasRequestParam -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativePushBridge {
  /**
   *
   * 初始化
   *
   */
  fun initPush(param: InitRequestParam): ResponseParam
  /**
   *
   * 连接
   * 
   */
  fun connect(param: InitRequestParam, callback: (Result<ResponseParam>) -> Unit)
  /**
   *
   * 断开连接
   * param: appId
   * 
   */
  fun disconnect(param: RequestParam): ResponseParam
  /**
   *
   * 添加连接状态监听
   * 
   */
  fun addConnStatusObserver(param: ObserverRequestParam): ResponseParam
  /**
   *
   * 移除连接状态监听
   * 
   */
  fun removeConnStatusObserver(param: ObserverRequestParam): ResponseParam
  /**
   *
   * 添加推送消息监听
   * 
   */
  fun addPushObserver(param: ObserverRequestParam): ResponseParam
  /**
   *
   * 移除连接状态监听
   * 
   */
  fun removePushObserver(param: ObserverRequestParam): ResponseParam
  /**
   *
   * 设置别名
   * 
   */
  fun setAlias(param: SetAliasRequestParam, callback: (Result<ResponseParam>) -> Unit)
  /**
   *
   * 清除别名
   * param: appId
   * 
   */
  fun clearAlias(param: RequestParam, callback: (Result<ResponseParam>) -> Unit)
  /**
   *
   * 订阅主题
   * param: appId, topic
   * 
   */
  fun subscribeTopic(param: RequestParam): ResponseParam
  /**
   *
   * 取消订阅主题
   * param: appId, topic
   * 
   */
  fun unsubscribeTopic(param: RequestParam): ResponseParam
  /**
   *
   * 添加主题订阅监听
   * 
   */
  fun addTopicsObserver(param: ObserverRequestParam): ResponseParam
  /**
   *
   * 移除主题订阅监听
   * 
   */
  fun removeTopicsObserver(param: ObserverRequestParam): ResponseParam

  companion object {
    /** The codec used by NativePushBridge. */
    val codec: MessageCodec<Any?> by lazy {
      NativePushBridgeCodec
    }
    /** Sets up an instance of `NativePushBridge` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativePushBridge?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.initPush", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as InitRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.initPush(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as InitRequestParam
            api.connect(paramArg) { result: Result<ResponseParam> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as RequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.disconnect(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.addConnStatusObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as ObserverRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addConnStatusObserver(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.removeConnStatusObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as ObserverRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.removeConnStatusObserver(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.addPushObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as ObserverRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addPushObserver(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.removePushObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as ObserverRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.removePushObserver(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.setAlias", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as SetAliasRequestParam
            api.setAlias(paramArg) { result: Result<ResponseParam> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.clearAlias", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as RequestParam
            api.clearAlias(paramArg) { result: Result<ResponseParam> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.subscribeTopic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as RequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.subscribeTopic(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.unsubscribeTopic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as RequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.unsubscribeTopic(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.addTopicsObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as ObserverRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addTopicsObserver(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativePushBridge.removeTopicsObserver", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paramArg = args[0] as ObserverRequestParam
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.removeTopicsObserver(paramArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object FlutterPushBridgeCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnStatusCall.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnStatusObserverCallParam.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConnectInfo.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PushCall.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PushMessageData.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PushObserverCallParam.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ResponseParam.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TopicCall.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TopicObserverCallParam.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TopicSubscribeData.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TopicSubscribeResult.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          TransferData.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ConnStatusCall -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ConnStatusObserverCallParam -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ConnectInfo -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PushCall -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PushMessageData -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PushObserverCallParam -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is ResponseParam -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is TopicCall -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is TopicObserverCallParam -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is TopicSubscribeData -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is TopicSubscribeResult -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is TransferData -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class FlutterPushBridge(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by FlutterPushBridge. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterPushBridgeCodec
    }
  }
  fun onConnStatusObserverCall(paramArg: ConnStatusObserverCallParam, callback: (ResponseParam) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FlutterPushBridge.onConnStatusObserverCall", codec)
    channel.send(listOf(paramArg)) {
      val result = it as ResponseParam
      callback(result)
    }
  }
  fun onPushObserverCall(paramArg: PushObserverCallParam, callback: (ResponseParam) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FlutterPushBridge.onPushObserverCall", codec)
    channel.send(listOf(paramArg)) {
      val result = it as ResponseParam
      callback(result)
    }
  }
  fun onTopicObserverCall(paramArg: TopicObserverCallParam, callback: (ResponseParam) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FlutterPushBridge.onTopicObserverCall", codec)
    channel.send(listOf(paramArg)) {
      val result = it as ResponseParam
      callback(result)
    }
  }
}
