// Autogenerated from Pigeon (v9.0.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ResponseCode {
  success,
  fail,
}

class RequestParam {
  RequestParam({
    required this.key,
    this.data,
  });

  String key;

  Map<String?, Object?>? data;

  Object encode() {
    return <Object?>[
      key,
      data,
    ];
  }

  static RequestParam decode(Object result) {
    result as List<Object?>;
    return RequestParam(
      key: result[0]! as String,
      data: (result[1] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class ResponseParam {
  ResponseParam({
    required this.code,
    this.message,
    this.data,
  });

  ResponseCode code;

  String? message;

  Map<String?, Object?>? data;

  Object encode() {
    return <Object?>[
      code.index,
      message,
      data,
    ];
  }

  static ResponseParam decode(Object result) {
    result as List<Object?>;
    return ResponseParam(
      code: ResponseCode.values[result[0]! as int],
      message: result[1] as String?,
      data: (result[2] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class InitRequestParam {
  InitRequestParam({
    required this.key,
    required this.data,
  });

  String key;

  PushConfig data;

  Object encode() {
    return <Object?>[
      key,
      data.encode(),
    ];
  }

  static InitRequestParam decode(Object result) {
    result as List<Object?>;
    return InitRequestParam(
      key: result[0]! as String,
      data: PushConfig.decode(result[1]! as List<Object?>),
    );
  }
}

class ObserverData {
  ObserverData({
    required this.callbackKey,
  });

  String callbackKey;

  Object encode() {
    return <Object?>[
      callbackKey,
    ];
  }

  static ObserverData decode(Object result) {
    result as List<Object?>;
    return ObserverData(
      callbackKey: result[0]! as String,
    );
  }
}

class ObserverRequestParam {
  ObserverRequestParam({
    required this.key,
    required this.data,
  });

  String key;

  ObserverData data;

  Object encode() {
    return <Object?>[
      key,
      data.encode(),
    ];
  }

  static ObserverRequestParam decode(Object result) {
    result as List<Object?>;
    return ObserverRequestParam(
      key: result[0]! as String,
      data: ObserverData.decode(result[1]! as List<Object?>),
    );
  }
}

class SetAliasRequestParam {
  SetAliasRequestParam({
    required this.key,
    required this.alias,
  });

  String key;

  List<String?> alias;

  Object encode() {
    return <Object?>[
      key,
      alias,
    ];
  }

  static SetAliasRequestParam decode(Object result) {
    result as List<Object?>;
    return SetAliasRequestParam(
      key: result[0]! as String,
      alias: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class PushConfig {
  PushConfig({
    required this.hostApp,
    required this.appId,
    required this.deviceId,
    this.defaultHosts,
  });

  String hostApp;

  String appId;

  String deviceId;

  List<String?>? defaultHosts;

  Object encode() {
    return <Object?>[
      hostApp,
      appId,
      deviceId,
      defaultHosts,
    ];
  }

  static PushConfig decode(Object result) {
    result as List<Object?>;
    return PushConfig(
      hostApp: result[0]! as String,
      appId: result[1]! as String,
      deviceId: result[2]! as String,
      defaultHosts: (result[3] as List<Object?>?)?.cast<String?>(),
    );
  }
}

///
/// 连接信息
/// */
class ConnInfo {
  ConnInfo({
  });

  Object encode() {
    return <Object?>[
    ];
  }

  static ConnInfo decode(Object result) {
    result as List<Object?>;
    return ConnInfo(
    );
  }
}

class ConnStatusObserverCallParam {
  ConnStatusObserverCallParam({
    required this.key,
    required this.data,
  });

  String key;

  ConnInfo data;

  Object encode() {
    return <Object?>[
      key,
      data.encode(),
    ];
  }

  static ConnStatusObserverCallParam decode(Object result) {
    result as List<Object?>;
    return ConnStatusObserverCallParam(
      key: result[0]! as String,
      data: ConnInfo.decode(result[1]! as List<Object?>),
    );
  }
}

///
/// 推送消息
/// */
class PushData {
  PushData({
  });

  Object encode() {
    return <Object?>[
    ];
  }

  static PushData decode(Object result) {
    result as List<Object?>;
    return PushData(
    );
  }
}

class PushObserverCallParam {
  PushObserverCallParam({
    required this.key,
    required this.data,
  });

  String key;

  PushData data;

  Object encode() {
    return <Object?>[
      key,
      data.encode(),
    ];
  }

  static PushObserverCallParam decode(Object result) {
    result as List<Object?>;
    return PushObserverCallParam(
      key: result[0]! as String,
      data: PushData.decode(result[1]! as List<Object?>),
    );
  }
}

///
/// 订阅结果
/// */
class SubscribeResult {
  SubscribeResult({
  });

  Object encode() {
    return <Object?>[
    ];
  }

  static SubscribeResult decode(Object result) {
    result as List<Object?>;
    return SubscribeResult(
    );
  }
}

class TopicData {
  TopicData({
    required this.topic,
    required this.result,
  });

  String topic;

  SubscribeResult result;

  Object encode() {
    return <Object?>[
      topic,
      result.encode(),
    ];
  }

  static TopicData decode(Object result) {
    result as List<Object?>;
    return TopicData(
      topic: result[0]! as String,
      result: SubscribeResult.decode(result[1]! as List<Object?>),
    );
  }
}

class TopicObserverCallParam {
  TopicObserverCallParam({
    required this.key,
    required this.data,
  });

  String key;

  TopicData data;

  Object encode() {
    return <Object?>[
      key,
      data.encode(),
    ];
  }

  static TopicObserverCallParam decode(Object result) {
    result as List<Object?>;
    return TopicObserverCallParam(
      key: result[0]! as String,
      data: TopicData.decode(result[1]! as List<Object?>),
    );
  }
}

class _NativePushBridgeCodec extends StandardMessageCodec {
  const _NativePushBridgeCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is InitRequestParam) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ObserverData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ObserverRequestParam) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PushConfig) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is RequestParam) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ResponseParam) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is SetAliasRequestParam) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return InitRequestParam.decode(readValue(buffer)!);
      case 129: 
        return ObserverData.decode(readValue(buffer)!);
      case 130: 
        return ObserverRequestParam.decode(readValue(buffer)!);
      case 131: 
        return PushConfig.decode(readValue(buffer)!);
      case 132: 
        return RequestParam.decode(readValue(buffer)!);
      case 133: 
        return ResponseParam.decode(readValue(buffer)!);
      case 134: 
        return SetAliasRequestParam.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativePushBridge {
  /// Constructor for [NativePushBridge].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativePushBridge({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativePushBridgeCodec();

  ///
  /// 连接
  /// */
  Future<ResponseParam> connect(InitRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.connect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 断开连接
  /// */
  Future<ResponseParam> disconnect() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.disconnect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 添加连接状态监听
  /// */
  Future<ResponseParam> addConnStatusObserver(ObserverRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.addConnStatusObserver', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 移除连接状态监听
  /// */
  Future<ResponseParam> removeConnStatusObserver(ObserverRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.removeConnStatusObserver', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 添加推送消息监听
  /// */
  Future<ResponseParam> addPushObserver(ObserverRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.addPushObserver', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 移除连接状态监听
  /// */
  Future<ResponseParam> removePushObserver(ObserverRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.removePushObserver', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 设置别名
  /// */
  Future<ResponseParam> setAlias(SetAliasRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.setAlias', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 清除别名
  /// */
  Future<ResponseParam> clearAlias() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.clearAlias', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 订阅主题
  /// */
  Future<ResponseParam> subscribeTopic(RequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.subscribeTopic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 取消订阅主题
  /// */
  Future<ResponseParam> unsubscribeTopic(RequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.unsubscribeTopic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 添加主题订阅监听
  /// */
  Future<ResponseParam> addTopicsObserver(ObserverRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.addTopicsObserver', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }

  ///
  /// 移除主题订阅监听
  /// */
  Future<ResponseParam> removeTopicsObserver(ObserverRequestParam arg_param) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativePushBridge.removeTopicsObserver', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_param]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ResponseParam?)!;
    }
  }
}

class _FlutterPushBridgeCodec extends StandardMessageCodec {
  const _FlutterPushBridgeCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ConnStatusObserverCallParam) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PushData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PushObserverCallParam) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ResponseParam) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is SubscribeResult) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is TopicData) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is TopicObserverCallParam) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ConnInfo.decode(readValue(buffer)!);
      case 129: 
        return ConnStatusObserverCallParam.decode(readValue(buffer)!);
      case 130: 
        return PushData.decode(readValue(buffer)!);
      case 131: 
        return PushObserverCallParam.decode(readValue(buffer)!);
      case 132: 
        return ResponseParam.decode(readValue(buffer)!);
      case 133: 
        return SubscribeResult.decode(readValue(buffer)!);
      case 134: 
        return TopicData.decode(readValue(buffer)!);
      case 135: 
        return TopicObserverCallParam.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class FlutterPushBridge {
  static const MessageCodec<Object?> codec = _FlutterPushBridgeCodec();

  ResponseParam onConnStatusObserverCall(ConnStatusObserverCallParam param);

  ResponseParam onPushObserverCall(PushObserverCallParam param);

  ResponseParam onTopicObserverCall(TopicObserverCallParam param);

  static void setup(FlutterPushBridge? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterPushBridge.onConnStatusObserverCall', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.FlutterPushBridge.onConnStatusObserverCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ConnStatusObserverCallParam? arg_param = (args[0] as ConnStatusObserverCallParam?);
          assert(arg_param != null,
              'Argument for dev.flutter.pigeon.FlutterPushBridge.onConnStatusObserverCall was null, expected non-null ConnStatusObserverCallParam.');
          final ResponseParam output = api.onConnStatusObserverCall(arg_param!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterPushBridge.onPushObserverCall', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.FlutterPushBridge.onPushObserverCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PushObserverCallParam? arg_param = (args[0] as PushObserverCallParam?);
          assert(arg_param != null,
              'Argument for dev.flutter.pigeon.FlutterPushBridge.onPushObserverCall was null, expected non-null PushObserverCallParam.');
          final ResponseParam output = api.onPushObserverCall(arg_param!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterPushBridge.onTopicObserverCall', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.FlutterPushBridge.onTopicObserverCall was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final TopicObserverCallParam? arg_param = (args[0] as TopicObserverCallParam?);
          assert(arg_param != null,
              'Argument for dev.flutter.pigeon.FlutterPushBridge.onTopicObserverCall was null, expected non-null TopicObserverCallParam.');
          final ResponseParam output = api.onTopicObserverCall(arg_param!);
          return output;
        });
      }
    }
  }
}
